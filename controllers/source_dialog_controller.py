import gi
import os

gi.require_version("Gtk", "4.0")
from gi.repository import Gtk, Gio, GObject

from data import Source, SourceType


@Gtk.Template(filename="layout/source_dialog.ui")
class SourceDialog(Gtk.Dialog):
    __gtype_name__ = "SourceDialog"

    name_entry = Gtk.Template.Child()
    path_entry = Gtk.Template.Child()
    extensions_entry = Gtk.Template.Child()
    type_dropdown = Gtk.Template.Child()
    active_switch = Gtk.Template.Child()

    browse_button = Gtk.Template.Child()
    cancel_button = Gtk.Template.Child()
    save_button = Gtk.Template.Child()

    def __init__(self, source=None, source_handler=None, parent=None, **kwargs):
        super().__init__(transient_for=parent, use_header_bar=True, **kwargs)

        self.source = source
        self.source_handler = source_handler
        self.editing = source is not None

        # Set up the type dropdown with available source types
        string_list = Gtk.StringList()
        for source_type in SourceType:
            string_list.append(source_type.name.capitalize())
        self.type_dropdown.set_model(string_list)

        # Connect signal handlers
        self.browse_button.connect("clicked", self._on_browse_clicked)
        self.cancel_button.connect("clicked", self._on_cancel_clicked)
        self.save_button.connect("clicked", self._on_save_clicked)

        # If editing an existing source, fill the form with its data
        if self.editing:
            self.set_title("Edit Source")
            self.name_entry.set_text(source.name)
            self.path_entry.set_text(source.path)

            # Set the active type in the dropdown
            for i, source_type in enumerate(SourceType):
                if source_type == source.source_type:
                    self.type_dropdown.set_selected(i)
                    break

            # Set extensions
            if source.file_extensions:
                self.extensions_entry.set_text(", ".join(source.file_extensions))

            # Set active state
            self.active_switch.set_active(source.active)
        else:
            self.set_title("Add Source")

    def _on_browse_clicked(self, button):
        dialog = Gtk.FileDialog.new()
        dialog.set_title("Select Folder")

        # Configure for folder selection
        dialog.set_initial_folder(Gio.File.new_for_path(os.path.expanduser("~")))

        # Show the dialog
        dialog.select_folder(self, None, self._on_folder_selected)

    def _on_folder_selected(self, dialog, result):
        try:
            folder = dialog.select_folder_finish(result)
            if folder:
                self.path_entry.set_text(folder.get_path())
        except Exception as e:
            print(f"Error selecting folder: {e}")

    def _on_cancel_clicked(self, button):
        self.close()

    def _on_save_clicked(self, button):
        # Validate form
        name = self.name_entry.get_text().strip()
        path = self.path_entry.get_text().strip()

        if not name:
            self._show_error("Name is required")
            return

        if not path:
            self._show_error("Path is required")
            return

        if not os.path.isdir(path):
            self._show_error("Path must be a valid directory")
            return

        # Extract source type
        selected_type_index = self.type_dropdown.get_selected()
        source_type = list(SourceType)[selected_type_index]

        # Extract extensions
        extensions_text = self.extensions_entry.get_text().strip()
        extensions = []
        if extensions_text:
            extensions = [ext.strip() for ext in extensions_text.split(",") if ext.strip()]

        # Get active state
        active = self.active_switch.get_active()

        # Create or update the source
        if self.editing:
            # Update existing source
            self.source.name = name
            self.source.path = path
            self.source.source_type = source_type
            self.source.file_extensions = extensions
            self.source.active = active
        else:
            # Create new source
            self.source = Source(
                id="",  # Will be auto-generated by the handler
                name=name,
                path=path,
                source_type=source_type,
                active=active,
                file_extensions=extensions
            )

        # Save and emit signal
        if self.source_handler.save_source(self.source):
            self.emit("source-saved", self.source)
            self.close()
        else:
            self._show_error("Failed to save source")

    def _show_error(self, message):
        dialog = Gtk.MessageDialog(
            transient_for=self,
            modal=True,
            message_type=Gtk.MessageType.ERROR,
            buttons=Gtk.ButtonsType.OK,
            text=message
        )
        dialog.connect("response", lambda d, r: d.destroy())
        dialog.show()

    # Define custom signals
    __gsignals__ = {
        "source-saved": (GObject.SignalFlags.RUN_FIRST, None, (object,)),
    }